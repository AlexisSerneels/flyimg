name: CD
on:
  push:
    branches:
      - main
jobs:
  release:
    name: Create new Tag and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install @semantic-release/git @semantic-release/changelog -D

      - name: Dry run to get the next release version
        id: tag_version
        run: |
          export NEXT_TAG_VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed -E 's/.* ([[:digit:].]+)$/\1/')
          echo "new_tag_version=${NEXT_TAG_VERSION}" >> $GITHUB_OUTPUT

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npx semantic-release

  docker_publish:
    needs: release
    if: ${{ needs.release.outputs.new_tag_version != '' }}
    runs-on: ubuntu-latest
    name: Docker Build and Push
    outputs:
      new_tag: ${{ needs.release.outputs.new_tag }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: |
            flyimg/flyimg-build:latest
            flyimg/flyimg-build:${{ needs.release.outputs.new_tag }}

  deploy_demo:
    name: Deploy to Demo demo.flyimg.io
    runs-on: ubuntu-latest
    needs: docker_publish
    steps:
      - name: Deploy new version of Flyimg to the demo server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FLYIMG_DEMO_HOST }}
          username: ${{ secrets.FLYIMG_DEMO_USERNAME }}
          key: ${{ secrets.FLYIMG_DEMO_KEY }}
          script: |
            bash -c "docker rm -f flyimg &>/dev/null"
            docker run -itd -p 8080:80 --name flyimg flyimg/flyimg-build:${{ needs.docker_publish.outputs.new_tag }}
